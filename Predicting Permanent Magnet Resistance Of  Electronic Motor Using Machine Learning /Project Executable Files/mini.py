# -*- coding: utf-8 -*-
"""mini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/kamalbeemarapu/VEC-ASSESSMENT1/blob/main/mini.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as ans

data=pd.read_csv("/content/measures_v2.csv")

data.drop(['stator_yoke','stator_tooth','stator_winding','torque'],axis =1 )

data.isnull().sum()

from sklearn.preprocessing import MinMaxScaler

data.fillna(data.mean(),inplace=True)

data.isnull().sum()

plt.figure(figsize=(15,6))
data['profile_id'].value_counts().plot(kind='bar')

data.columns

import seaborn as sns

from csv import Sniffer
import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(2, 4, figsize=(20,5),sharey=True)

# Use the 'x' and 'y' parameters to specify columns within the DataFrame
sns.scatterplot(x='ambient', y='pm', data=data, ax=axes[0][0])
sns.scatterplot(x='coolant', y='pm', data=data, ax=axes[0][1])
sns

plt.figure(figsize=(14,7))
sns.heatmap(data.corr(),annot=True)

data.info()

data.describe()

from sklearn.model_selection import train_test_split

# Assuming 'data' is your DataFrame and 'target_variable' is the name of your target variable column
X = data.drop('pm', axis=1)  # Replace 'target_variable' with the actual name
y = data['pm']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Adjust test_size and random_state as needed

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

Ir=LinearRegression()
dr=DecisionTreeRegressor()
rf=RandomForestRegressor()
svm =SVR()

Ir.fit(X_train,y_train)
dr.fit(X_train,y_train)
rf.fit(X_train,y_train)
svm.fit(X_train,y_train)

from sklearn import metrics

# Predict using your fitted models
p1 = Ir.predict(X_test)
p2 = dr.predict(X_test)
p3 = rf.predict(X_test)
p4 = svm.predict(X_test)

# Now calculate and print the R^2 scores
print(metrics.r2_score(y_test,p1))
print(metrics.r2_score(y_test,p2))
print(metrics.r2_score(y_test,p3))
print(metrics.r2_score(y_test,p4))

from sklearn.metrics import mean_squared_error
print(mean_squared_error(y_test,p3))

import pickle

pickle.dump(rf,open('model.pkl','wb'))









